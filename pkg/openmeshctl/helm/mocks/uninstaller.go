// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/helm (interfaces: Uninstaller)

// Package mock_helm is a generated GoMock package.
package mock_helm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "github.com/solo-io/gloo-mesh/pkg/openmeshctl/runtime"
)

// MockUninstaller is a mock of Uninstaller interface.
type MockUninstaller struct {
	ctrl     *gomock.Controller
	recorder *MockUninstallerMockRecorder
}

// MockUninstallerMockRecorder is the mock recorder for MockUninstaller.
type MockUninstallerMockRecorder struct {
	mock *MockUninstaller
}

// NewMockUninstaller creates a new mock instance.
func NewMockUninstaller(ctrl *gomock.Controller) *MockUninstaller {
	mock := &MockUninstaller{ctrl: ctrl}
	mock.recorder = &MockUninstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUninstaller) EXPECT() *MockUninstallerMockRecorder {
	return m.recorder
}

// Uninstall mocks base method.
func (m *MockUninstaller) Uninstall(arg0 runtime.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockUninstallerMockRecorder) Uninstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockUninstaller)(nil).Uninstall), arg0, arg1)
}
