// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/resource (interfaces: Formatter)

// Package mock_resource is a generated GoMock package.
package mock_resource

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	output "github.com/solo-io/gloo-mesh/pkg/openmeshctl/output"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockFormatter is a mock of Formatter interface.
type MockFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFormatterMockRecorder
}

// MockFormatterMockRecorder is the mock recorder for MockFormatter.
type MockFormatterMockRecorder struct {
	mock *MockFormatter
}

// NewMockFormatter creates a new mock instance.
func NewMockFormatter(ctrl *gomock.Controller) *MockFormatter {
	mock := &MockFormatter{ctrl: ctrl}
	mock.recorder = &MockFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormatter) EXPECT() *MockFormatterMockRecorder {
	return m.recorder
}

// ToSummary mocks base method.
func (m *MockFormatter) ToSummary(arg0 runtime.Object) *output.Summary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSummary", arg0)
	ret0, _ := ret[0].(*output.Summary)
	return ret0
}

// ToSummary indicates an expected call of ToSummary.
func (mr *MockFormatterMockRecorder) ToSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSummary", reflect.TypeOf((*MockFormatter)(nil).ToSummary), arg0)
}

// ToTable mocks base method.
func (m *MockFormatter) ToTable(arg0 []runtime.Object, arg1, arg2 bool) *output.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(*output.Table)
	return ret0
}

// ToTable indicates an expected call of ToTable.
func (mr *MockFormatterMockRecorder) ToTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToTable", reflect.TypeOf((*MockFormatter)(nil).ToTable), arg0, arg1, arg2)
}
