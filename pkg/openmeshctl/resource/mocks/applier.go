// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/resource (interfaces: Applier)

// Package mock_resource is a generated GoMock package.
package mock_resource

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apply "github.com/solo-io/gloo-mesh/pkg/openmeshctl/resource/apply"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockApplier is a mock of Applier interface.
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
}

// MockApplierMockRecorder is the mock recorder for MockApplier.
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance.
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockApplier) Apply(arg0 apply.Context, arg1 v1.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockApplierMockRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockApplier)(nil).Apply), arg0, arg1)
}
