// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/output (interfaces: Printer)

// Package mock_output is a generated GoMock package.
package mock_output

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	output "github.com/solo-io/gloo-mesh/pkg/openmeshctl/output"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockPrinter is a mock of Printer interface.
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter.
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance.
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// PrintRaw mocks base method.
func (m *MockPrinter) PrintRaw(arg0 runtime.Object, arg1 output.Format) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintRaw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintRaw indicates an expected call of PrintRaw.
func (mr *MockPrinterMockRecorder) PrintRaw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintRaw", reflect.TypeOf((*MockPrinter)(nil).PrintRaw), arg0, arg1)
}

// PrintSummary mocks base method.
func (m *MockPrinter) PrintSummary(arg0 *output.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintSummary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintSummary indicates an expected call of PrintSummary.
func (mr *MockPrinterMockRecorder) PrintSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintSummary", reflect.TypeOf((*MockPrinter)(nil).PrintSummary), arg0)
}

// PrintTable mocks base method.
func (m *MockPrinter) PrintTable(arg0 *output.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintTable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintTable indicates an expected call of PrintTable.
func (mr *MockPrinterMockRecorder) PrintTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintTable", reflect.TypeOf((*MockPrinter)(nil).PrintTable), arg0)
}
