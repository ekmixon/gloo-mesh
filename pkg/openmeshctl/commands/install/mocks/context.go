// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/commands/install (interfaces: Context)

// Package mock_install is a generated GoMock package.
package mock_install

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	register "github.com/solo-io/gloo-mesh/pkg/openmeshctl/commands/register"
	helm "github.com/solo-io/gloo-mesh/pkg/openmeshctl/helm"
	registry "github.com/solo-io/gloo-mesh/pkg/openmeshctl/resource/registry"
	pflag "github.com/spf13/pflag"
	values "helm.sh/helm/v3/pkg/cli/values"
	meta "k8s.io/apimachinery/pkg/api/meta"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	clientcmd "k8s.io/client-go/tools/clientcmd"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// AddToFlags mocks base method.
func (m *MockContext) AddToFlags(arg0 *pflag.FlagSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToFlags", arg0)
}

// AddToFlags indicates an expected call of AddToFlags.
func (mr *MockContextMockRecorder) AddToFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFlags", reflect.TypeOf((*MockContext)(nil).AddToFlags), arg0)
}

// AgentCRDsChart mocks base method.
func (m *MockContext) AgentCRDsChart() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCRDsChart")
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentCRDsChart indicates an expected call of AgentCRDsChart.
func (mr *MockContextMockRecorder) AgentCRDsChart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCRDsChart", reflect.TypeOf((*MockContext)(nil).AgentCRDsChart))
}

// AgentCRDsReleaseName mocks base method.
func (m *MockContext) AgentCRDsReleaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentCRDsReleaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentCRDsReleaseName indicates an expected call of AgentCRDsReleaseName.
func (mr *MockContextMockRecorder) AgentCRDsReleaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentCRDsReleaseName", reflect.TypeOf((*MockContext)(nil).AgentCRDsReleaseName))
}

// AgentChart mocks base method.
func (m *MockContext) AgentChart() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentChart")
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentChart indicates an expected call of AgentChart.
func (mr *MockContextMockRecorder) AgentChart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentChart", reflect.TypeOf((*MockContext)(nil).AgentChart))
}

// AgentChartOptions mocks base method.
func (m *MockContext) AgentChartOptions() *values.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentChartOptions")
	ret0, _ := ret[0].(*values.Options)
	return ret0
}

// AgentChartOptions indicates an expected call of AgentChartOptions.
func (mr *MockContextMockRecorder) AgentChartOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentChartOptions", reflect.TypeOf((*MockContext)(nil).AgentChartOptions))
}

// AgentReleaseName mocks base method.
func (m *MockContext) AgentReleaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentReleaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentReleaseName indicates an expected call of AgentReleaseName.
func (mr *MockContextMockRecorder) AgentReleaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentReleaseName", reflect.TypeOf((*MockContext)(nil).AgentReleaseName))
}

// AgentVersion mocks base method.
func (m *MockContext) AgentVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// AgentVersion indicates an expected call of AgentVersion.
func (mr *MockContextMockRecorder) AgentVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentVersion", reflect.TypeOf((*MockContext)(nil).AgentVersion))
}

// Chart mocks base method.
func (m *MockContext) Chart() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chart")
	ret0, _ := ret[0].(string)
	return ret0
}

// Chart indicates an expected call of Chart.
func (mr *MockContextMockRecorder) Chart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chart", reflect.TypeOf((*MockContext)(nil).Chart))
}

// ChartOptions mocks base method.
func (m *MockContext) ChartOptions() *values.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChartOptions")
	ret0, _ := ret[0].(*values.Options)
	return ret0
}

// ChartOptions indicates an expected call of ChartOptions.
func (mr *MockContextMockRecorder) ChartOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChartOptions", reflect.TypeOf((*MockContext)(nil).ChartOptions))
}

// ClusterName mocks base method.
func (m *MockContext) ClusterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterName indicates an expected call of ClusterName.
func (mr *MockContextMockRecorder) ClusterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterName", reflect.TypeOf((*MockContext)(nil).ClusterName))
}

// ClusterRegistry mocks base method.
func (m *MockContext) ClusterRegistry() (register.ClusterRegistry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRegistry")
	ret0, _ := ret[0].(register.ClusterRegistry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterRegistry indicates an expected call of ClusterRegistry.
func (mr *MockContextMockRecorder) ClusterRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRegistry", reflect.TypeOf((*MockContext)(nil).ClusterRegistry))
}

// Deadline mocks base method.
func (m *MockContext) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockContextMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockContext)(nil).Deadline))
}

// Done mocks base method.
func (m *MockContext) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockContextMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockContext)(nil).Done))
}

// Err mocks base method.
func (m *MockContext) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockContextMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockContext)(nil).Err))
}

// ErrOut mocks base method.
func (m *MockContext) ErrOut() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ErrOut")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// ErrOut indicates an expected call of ErrOut.
func (mr *MockContextMockRecorder) ErrOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrOut", reflect.TypeOf((*MockContext)(nil).ErrOut))
}

// HelmInstaller mocks base method.
func (m *MockContext) HelmInstaller() (helm.Installer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelmInstaller")
	ret0, _ := ret[0].(helm.Installer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelmInstaller indicates an expected call of HelmInstaller.
func (mr *MockContextMockRecorder) HelmInstaller() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelmInstaller", reflect.TypeOf((*MockContext)(nil).HelmInstaller))
}

// KubeClient mocks base method.
func (m *MockContext) KubeClient() (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeClient")
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubeClient indicates an expected call of KubeClient.
func (mr *MockContextMockRecorder) KubeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeClient", reflect.TypeOf((*MockContext)(nil).KubeClient))
}

// KubeConfig mocks base method.
func (m *MockContext) KubeConfig() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeConfig")
	ret0, _ := ret[0].(string)
	return ret0
}

// KubeConfig indicates an expected call of KubeConfig.
func (mr *MockContextMockRecorder) KubeConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeConfig", reflect.TypeOf((*MockContext)(nil).KubeConfig))
}

// KubeContext mocks base method.
func (m *MockContext) KubeContext() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeContext")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KubeContext indicates an expected call of KubeContext.
func (mr *MockContextMockRecorder) KubeContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeContext", reflect.TypeOf((*MockContext)(nil).KubeContext))
}

// Namespace mocks base method.
func (m *MockContext) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockContextMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockContext)(nil).Namespace))
}

// Out mocks base method.
func (m *MockContext) Out() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Out indicates an expected call of Out.
func (mr *MockContextMockRecorder) Out() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*MockContext)(nil).Out))
}

// Register mocks base method.
func (m *MockContext) Register() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockContextMockRecorder) Register() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockContext)(nil).Register))
}

// Registry mocks base method.
func (m *MockContext) Registry() registry.TypeRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registry")
	ret0, _ := ret[0].(registry.TypeRegistry)
	return ret0
}

// Registry indicates an expected call of Registry.
func (mr *MockContextMockRecorder) Registry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registry", reflect.TypeOf((*MockContext)(nil).Registry))
}

// ReleaseName mocks base method.
func (m *MockContext) ReleaseName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReleaseName indicates an expected call of ReleaseName.
func (mr *MockContextMockRecorder) ReleaseName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseName", reflect.TypeOf((*MockContext)(nil).ReleaseName))
}

// ToDiscoveryClient mocks base method.
func (m *MockContext) ToDiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDiscoveryClient")
	ret0, _ := ret[0].(discovery.CachedDiscoveryInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToDiscoveryClient indicates an expected call of ToDiscoveryClient.
func (mr *MockContextMockRecorder) ToDiscoveryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDiscoveryClient", reflect.TypeOf((*MockContext)(nil).ToDiscoveryClient))
}

// ToRESTConfig mocks base method.
func (m *MockContext) ToRESTConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTConfig indicates an expected call of ToRESTConfig.
func (mr *MockContextMockRecorder) ToRESTConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTConfig", reflect.TypeOf((*MockContext)(nil).ToRESTConfig))
}

// ToRESTMapper mocks base method.
func (m *MockContext) ToRESTMapper() (meta.RESTMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTMapper")
	ret0, _ := ret[0].(meta.RESTMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTMapper indicates an expected call of ToRESTMapper.
func (mr *MockContextMockRecorder) ToRESTMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTMapper", reflect.TypeOf((*MockContext)(nil).ToRESTMapper))
}

// ToRawKubeConfigLoader mocks base method.
func (m *MockContext) ToRawKubeConfigLoader() clientcmd.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRawKubeConfigLoader")
	ret0, _ := ret[0].(clientcmd.ClientConfig)
	return ret0
}

// ToRawKubeConfigLoader indicates an expected call of ToRawKubeConfigLoader.
func (mr *MockContextMockRecorder) ToRawKubeConfigLoader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRawKubeConfigLoader", reflect.TypeOf((*MockContext)(nil).ToRawKubeConfigLoader))
}

// Value mocks base method.
func (m *MockContext) Value(arg0 interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockContextMockRecorder) Value(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockContext)(nil).Value), arg0)
}

// Verbose mocks base method.
func (m *MockContext) Verbose() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verbose")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verbose indicates an expected call of Verbose.
func (mr *MockContextMockRecorder) Verbose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verbose", reflect.TypeOf((*MockContext)(nil).Verbose))
}

// Version mocks base method.
func (m *MockContext) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockContextMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockContext)(nil).Version))
}
