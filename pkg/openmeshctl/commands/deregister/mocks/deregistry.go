// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/commands/deregister (interfaces: ClusterDeregistry)

// Package mock_deregister is a generated GoMock package.
package mock_deregister

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	deregister "github.com/solo-io/gloo-mesh/pkg/openmeshctl/commands/deregister"
)

// MockClusterDeregistry is a mock of ClusterDeregistry interface.
type MockClusterDeregistry struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDeregistryMockRecorder
}

// MockClusterDeregistryMockRecorder is the mock recorder for MockClusterDeregistry.
type MockClusterDeregistryMockRecorder struct {
	mock *MockClusterDeregistry
}

// NewMockClusterDeregistry creates a new mock instance.
func NewMockClusterDeregistry(ctrl *gomock.Controller) *MockClusterDeregistry {
	mock := &MockClusterDeregistry{ctrl: ctrl}
	mock.recorder = &MockClusterDeregistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDeregistry) EXPECT() *MockClusterDeregistryMockRecorder {
	return m.recorder
}

// DeregisterCluster mocks base method.
func (m *MockClusterDeregistry) DeregisterCluster(arg0 deregister.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterCluster indicates an expected call of DeregisterCluster.
func (mr *MockClusterDeregistryMockRecorder) DeregisterCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterCluster", reflect.TypeOf((*MockClusterDeregistry)(nil).DeregisterCluster), arg0, arg1, arg2)
}
