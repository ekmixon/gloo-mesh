// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/gloo-mesh/pkg/openmeshctl/commands/register (interfaces: ClusterRegistry)

// Package mock_register is a generated GoMock package.
package mock_register

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	register "github.com/solo-io/gloo-mesh/pkg/openmeshctl/commands/register"
)

// MockClusterRegistry is a mock of ClusterRegistry interface.
type MockClusterRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockClusterRegistryMockRecorder
}

// MockClusterRegistryMockRecorder is the mock recorder for MockClusterRegistry.
type MockClusterRegistryMockRecorder struct {
	mock *MockClusterRegistry
}

// NewMockClusterRegistry creates a new mock instance.
func NewMockClusterRegistry(ctrl *gomock.Controller) *MockClusterRegistry {
	mock := &MockClusterRegistry{ctrl: ctrl}
	mock.recorder = &MockClusterRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterRegistry) EXPECT() *MockClusterRegistryMockRecorder {
	return m.recorder
}

// RegisterCluster mocks base method.
func (m *MockClusterRegistry) RegisterCluster(arg0 register.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCluster indicates an expected call of RegisterCluster.
func (mr *MockClusterRegistryMockRecorder) RegisterCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCluster", reflect.TypeOf((*MockClusterRegistry)(nil).RegisterCluster), arg0, arg1, arg2)
}
